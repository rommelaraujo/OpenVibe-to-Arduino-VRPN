#include "stdafx.h"

#include <iostream>

#include <vrpn_Analog.h>

#include <stdio.h>
#include <tchar.h>
#include "SerialClass.h"	// Library described above
#include <string>

void VRPN_CALLBACK vrpn_analog_callback(void* user_data, vrpn_ANALOGCB analog)
{
	if (analog.channel[0] > 0)
	{
		*(char*)user_data = 1;	//open hand
	}
	else
	{
		*(char*)user_data = -1;	//close hand
	}	
}

int main(int argc, char** argv)
{

	char dataFromOV = 0;

	/* VRPN Analog object */
	vrpn_Analog_Remote* VRPNAnalog;

	/* Binding of the VRPN Analog to a callback */
	VRPNAnalog = new vrpn_Analog_Remote("openvibe_vrpn_analog@localhost");
	VRPNAnalog->register_change_handler(&dataFromOV, vrpn_analog_callback);

	
	//*************************************
	//Arduino communication
	
	Serial* SP = new Serial("\\\\.\\COM5");    // adjust as needed
	
	int incomingDataLength = 1;
	int outgoingDataLength = 1;
	
	char incomingData[1] = "";			// don't forget to pre-allocate memory
	char outgoingData[1] = "";				//data to be sent
	
	int readResult = 0;
	int writeResult = 0;

	printf("Attempting communication with Arduino\n\n");

	if (SP->IsConnected())
	{
		printf("We're connected\n");
		
	}
	else
		printf("Connection failed");
	

	while (SP->IsConnected())
	{
		VRPNAnalog->mainloop();	//check for new incoming OV data

		if (dataFromOV != 0)	//data received from OV
		{
			outgoingData[0] = dataFromOV;
			writeResult = SP->WriteData(outgoingData, outgoingDataLength);	//write to Arduino
			printf("Data sent from OV to Arduino: %d \n", outgoingData[0]);

			dataFromOV = 0;
		}

		readResult = SP->ReadData(incomingData, incomingDataLength);	//returns -1 if there's nothing to read

		if (readResult>0)	//a message has been sent from Arduino
			printf("Data received from Arduino: %d \n\n", incomingData[0]);

		//Sleep(500);
	}
	//************************************************
	return 0;
}